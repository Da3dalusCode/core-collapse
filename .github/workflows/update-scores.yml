name: Update leaderboard
on:
  issues:
    types: [opened]
permissions:
  contents: write
  issues: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Append score from Issue to scores.json
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title || '';
            if (!/^Score:/i.test(title)) { core.info('Not a score submission. Skipping.'); return; }
            const body = issue.body || '';
            function grab(re, fallback='') {
              const m = re.exec(body) || re.exec(title);
              return m ? m[1].trim() : fallback;
            }
            const name  = grab(/name\\s*:\\s*([^\\n]+)/i, 'Anonymous').slice(0, 24);
            const score = parseInt(grab(/score\\s*:\\s*(\\d+)/i, '0'), 10) || 0;
            const wave  = parseInt(grab(/wave\\s*:\\s*(\\d+)/i, '0'), 10) || 0;
            const kills = parseInt(grab(/kills\\s*:\\s*(\\d+)/i, '0'), 10) || 0;
            const energy= parseInt(grab(/energyCollected\\s*:\\s*(\\d+)/i, '0'), 10) || 0;
            const entry = { name, score, wave, kills, energy, date: new Date().toISOString() };

            const path = 'scores.json';
            const { owner, repo } = context.repo;

            let data = [];
            try {
              const resp = await github.repos.getContent({ owner, repo, path });
              const content = Buffer.from(resp.data.content, 'base64').toString('utf8');
              data = JSON.parse(content);
            } catch (e) {
              core.info('scores.json not found, creating a new one.');
              data = [];
            }

            data.push(entry);
            data.sort((a,b) => b.score - a.score);
            data = data.slice(0, 100);

            const newContent = Buffer.from(JSON.stringify(data, null, 2)).toString('base64');

            let sha;
            try {
              const resp = await github.repos.getContent({ owner, repo, path });
              sha = resp.data.sha;
            } catch (e) {
              sha = undefined;
            }

            await github.repos.createOrUpdateFileContents({
              owner, repo, path,
              message: `chore: update scores from issue #${issue.number}`,
              content: newContent,
              sha
            });

            await github.issues.createComment({
              owner, repo, issue_number: issue.number,
              body: 'Score recorded âœ…'
            });
            await github.issues.update({
              owner, repo, issue_number: issue.number,
              state: 'closed',
              labels: ['score']
            });
